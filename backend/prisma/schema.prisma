// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  image             String?
  role              UserRole  @default(USER)
  password          String
  isVerified        Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetExpiry       DateTime?
  CreatedAt         DateTime  @default(now())
  UpdatedAt         DateTime  @updatedAt

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty          Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testCases          Json
  codeSnippets       Json
  referenceSolutions Json
  CreatedAt          DateTime   @default(now())
  UpdatedAt          DateTime   @updatedAt

  //Relationships
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
  solvedBy   ProblemSolved[]
}

model Submission {
  id             String   @id @default(uuid())
  userId         String
  problemId      String
  sourceCode     Json
  language       String
  stdin          String?
  stdout         String?
  stdeerr        String?
  compiledOutput String?
  status         String
  memory         String?
  time           String?
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expectedOutput String
  stderr         String?
  compiledOutput String?
  status         String
  memory         String?
  time           String?
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
